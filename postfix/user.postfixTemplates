# Validate argument for Array/Collection/Map/String/Boolean
.jsontostring : commons-lang json2String
# ANY
    ANY                 [com.alibaba.fastjson.JSONObject]     →  com.alibaba.fastjson.JSONObject.toJSONString($expr$)

.toobject : 字符串转对象
    ANY →  JSON.parseObject($expr$, $end$);

.jsontoobject : 字符串转对象
    ANY →  JSON.parseObject($expr$, $end$);

.jsontoarray : 字符串转集合
    ANY →  JSONArray.parseArray($expr$, $end$);



.groupByDouble : double groupby
    ANY →  $expr$.stream().collect(Collectors.groupingBy(TemplateShopDO::getTemplateSn, Collectors.mapping(t -> $end$, Collectors.toList())));

.groupByCount : groupByCount
	ANY -> $expr$.stream().collect(Collectors.groupingBy(Order::getUserId, Collectors.counting()));
.log : log
    ANY -> log.info("$expr$={}", com.alibaba.fastjson.JSONObject.toJSONString($expr$));

.newlist : new Object ArrayList
    ANY →  List<$expr$> $var:suggestVariableName()$ = new ArrayList<>();



# Junit5
.fail : fail
    java.lang.String [org.junit.jupiter.api.Assertions]            →  org.junit.jupiter.api.Assertions.fail($expr$);
.assertTrue : assertTrue
    BOOLEAN [org.junit.jupiter.api.Assertions]           →  org.junit.jupiter.api.Assertions.assertTrue($expr$);
.assertFalse : assertFalse
    BOOLEAN [org.junit.jupiter.api.Assertions]           →  org.junit.jupiter.api.Assertions.assertFalse($expr$);
.assertNull : assertNull
    ANY [org.junit.jupiter.api.Assertions]                         →  org.junit.jupiter.api.Assertions.assertNull($expr$);
.assertNotNull : assertNotNull
    ANY [org.junit.jupiter.api.Assertions]                         →  org.junit.jupiter.api.Assertions.assertNotNull($expr$);
.assertSame : assertSame
    ANY [org.junit.jupiter.api.Assertions]                         →  org.junit.jupiter.api.Assertions.assertSame($args$, $expr$);
.assertNotSame : assertNotSame
    ANY [org.junit.jupiter.api.Assertions]                         →  org.junit.jupiter.api.Assertions.assertNotSame($args$, $expr$);
.assertEquals : assertEquals
    ANY [org.junit.jupiter.api.Assertions]                         →  org.junit.jupiter.api.Assertions.assertEquals($args$, $expr$);
.assertNotEquals : assertNotEquals
    ANY [org.junit.jupiter.api.Assertions]                         →  org.junit.jupiter.api.Assertions.assertNotEquals($args$, $expr$);
.assertThrows : assertThrows
    ANY [org.junit.jupiter.api.Assertions]                         →  org.junit.jupiter.api.Assertions.assertThrows($end$, ()->$expr$);
.assertDoesNotThrow : assertDoesNotThrow
    ANY [org.junit.jupiter.api.Assertions]                         →  org.junit.jupiter.api.Assertions.assertDoesNotThrow(()->$expr$);
.assertArrayEquals : assertEquals
    ARRAY [org.junit.jupiter.api.Assertions]                       →  org.junit.jupiter.api.Assertions.assertArrayEquals($args$, $expr$);
.assertIterableEquals : assertIterableEquals
    java.lang.Iterable [org.junit.jupiter.api.Assertions]          →  org.junit.jupiter.api.Assertions.assertIterableEquals($args$, $expr$);
